<!DOCTYPE html>
<html>
<body>

<h1>使用 "use strict":</h1>

<h3>不允许使用变量而不声明它。</h3>

<p>在浏览器中激活调试（F12）以查看错误报告。</p>

<script>
"use strict"
function takeLongTime() {
    return new Promise(resolve => {
        setTimeout(() => resolve("long_time_value"), 3000);
    });
}

async function func1(){
let results=new Array();
results.push(takeLongTime());
results.push(takeLongTime());
results.push(takeLongTime());
results.push(takeLongTime());
results.push(takeLongTime());
let xx=await results[0]+await results[1];
alert("");
return xx;
}


alert(func1());

</script>

</body>
</html>













<!DOCTYPE html>
<html>
<body>

<h1>使用 "use strict":</h1>

<h3>不允许使用变量而不声明它。</h3>

<p>在浏览器中激活调试（F12）以查看错误报告。</p>

<script>
"use strict"

function doJob(x,sec) {
  return new Promise(resolve => {
  console.log('Start: ' + x);
    setTimeout(() => {
        console.log('End: ' + x);
      resolve(x);
    }, sec *1000);
  });
}

async function ParallelFlow(){
 
let result1 =  doJob(1,1);
let result2 =  doJob(2,2);
let result3 =  doJob(3,3);
 
let finalResult =await result1+ await result2+ await result3;
 
console.log(finalResult);
return finalResult;
 

}
 
 ParallelFlow().then(resolve=>{alert(resolve)});



</script>

</body>
</html>

{
  "FunctionName": "seeding",
  "FunctionParameter": {
   "seedingRequest":[{"soilId":"FE89F29C011F446D","species":"tomato","plant_time":"today"}]
  },
  "RevisionSelection": "Live",
  "GeneratePlayStreamEvent": true
}

{
  "FunctionName": "harvesting",
  "FunctionParameter": {
"harvestRequest":[{"soilId":"FE89F29C011F446D","productId":["tomato_product","sunflower_product"]}]
  },
  "RevisionSelection": "Live",
  "GeneratePlayStreamEvent": true
}








    // this.time.addEvent({
    //     loop: true,
    //     delay: 1000,
    //     callback: soilUpdate,
    //     callbackScope: this
    // })







//0529
/// <reference path="./node_modules/playfab-web-sdk/src/Typings/PlayFab/PlayFabClientApi.d.ts" />
/// <reference path="./node_modules/phaser/types/phaser.d.ts" />
/// <reference path="./node_modules/playfab-web-sdk/src/Typings/Playfab/Playfab.d.ts" />
'use strict';


var config = {
    type: Phaser.AUTO,
    width: 1260,
    height: 784,
    physics: {
        "default": 'arcade',
        arcade: {
            gravity: { y: 0 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};
var customId = "user-01";
var player;
var cursors;
var game = new Phaser.Game(config);
var scene;

var growthStageTime = new Array(30, 80, 150);
var opreationType = 0;
var currentSpecies;
var playFabId;

var userSoil=[];
var userFertilizer=[];
var userProduct=[];
var userSeed=[];
var userVirtualCurrency= { GD: 0 };
var allSpecies = ['tomato', 'eggplant', 'sunflower', 'strawberry'];
var allTypeOfFertilizer = ['common_fertilizer', 'uncommon_fertilizer'];

var moneyNum;

var date;
var harvestingRequest = [];
var seedingRequest = [];
var eradicateRequest = [];
var accelerateRequest = [];
var soilOp = [];

var selectedShopItem = null;
var selectedShopItemCount = 0;
var shopGroup = [];

function sync() {
    accelerate();
    seeding();
    harvesting();
    eradicate();
}


function preload() {
    let srcs = ['background', 'slogan', 'warehouse', 'shop',
        'nothing', 'soil_ready', 'soil_unready',
        'fertilizer', 'spade', 'GD',
        'shop_background', 'add', 'sub', 'buy', 'close'];
    srcs = srcs.concat(allSpecies);
    for (let i = 0; i < srcs.length; i++) {
        this.load.image(srcs[i], 'assets/' + srcs[i] + '.png');
    }

    allSpecies.map(sp => this.load.spritesheet(sp + '_seed', 'assets/' + sp + '_seed.png', { frameWidth: 100, frameHeight: 100 }));
    this.load.spritesheet('dude', 'assets/dude.png', { frameWidth: 32, frameHeight: 48 });
}
function create() {
    let sloganYL = 730;
    let sloganYH = 40;
    let sloganX=630;
    let iconLeft = 200;
    let iconGap = 130;
 
    this.add.image(0, 0, 'background').setOrigin(0, 0);
    this.add.image(sloganX, sloganYH, 'slogan')
    this.add.image(sloganX, sloganYL, 'slogan')
    //shop
    {

        let bg = this.add.image(630, 392, 'shop_background').setScale(1.5).setDepth(-1);
        shopGroup.push(bg);
        for (let i = 0; i < allSpecies.length; i++) {
            let _btn = this.add.image(400 + 130 * i, 300, allSpecies[i] + '_seed').setDepth(-1);
            shopGroup.push(_btn);
            _btn.itemId = allSpecies[i] + '_seed';
            _btn.inputEnabled = true;
            _btn.on('pointerdown', function () {
                if (selectedShopItem) {
                    selectedShopItem.setScale(1);
                }
                this.setScale(2);
                selectedShopItem = this;
            });
            let _text = this.add.text(550, 450, " " + selectedShopItemCount + " ", { backgroundColor: "#fff", fontSize: '40px', fontWeight: 'bolder', fill: '#000' }).setDepth(-1).setOrigin(0.5, 0.5);
            shopGroup.push(_text);
            let op = ["sub", "add"];
            for (let i = 0; i < op.length; i++) {
                let _btn = this.add.image(500 + 100 * i, 450, op[i]).setDepth(-1);
                shopGroup.push(_btn);
                _btn.originX = 0.5;
                _btn.inputEnabled = true;
                _btn.on('pointerdown', function () {
                    selectedShopItemCount += 2 * (i - 0.5);
                    selectedShopItemCount = Math.max(0, selectedShopItemCount);
                    _text.setText(" " + selectedShopItemCount + " ");
                });
            }

            let btn_buy = this.add.image(700, 450, "buy").setDepth(-1);
            shopGroup.push(btn_buy);
            btn_buy.inputEnabled = false;
            btn_buy.on('pointerdown', function () {
                btn_buy.setTint(0x999999);
                if (selectedShopItem && selectedShopItem.itemId) {
                    let purchaseReq = {
                        "CatalogVersion": "main",
                        "StoreId": "seed_store",
                        "Items": [
                            {
                                "ItemId": selectedShopItem.itemId,
                                "Quantity": selectedShopItemCount,
                                //  "Annotation": "totally buying something"
                            }
                        ]
                    }
                    PlayFabClientSDK.StartPurchase(purchaseReq, (result, error) => {
                        if (result !== null) {
                            let payReq = {
                                "OrderId": result.data.OrderId,
                                "ProviderName": result.data.PaymentOptions[0].ProviderName,
                                "Currency": result.data.PaymentOptions[0].Currency
                            }
                            PlayFabClientSDK.PayForPurchase(payReq, (result, error) => {
                                if (result !== null) {
                                    let payReq = {
                                        "OrderId": result.data.OrderId,
                                    }
                                    PlayFabClientSDK.ConfirmPurchase(payReq, (result, error) => {
                                        if (result !== null) {
                                            alert("successful purchased " + selectedShopItemCount + "  " + selectedShopItem.itemId);
                                            btn_buy.setTint(0xffffff);
                                            btn_buy.inputEnabled = true;
                                        } else if (error !== null) {
                                            alert("ConfirmPurchase Error:  " + PlayFab.GenerateErrorReport(error));
                                            btn_buy.setTint(0xffffff);
                                            btn_buy.inputEnabled = true;
                                        }
                                    })
                                }

                                else if (error !== null) {
                                    alert("PayForPurchase Error:  " + PlayFab.GenerateErrorReport(error));
                                    btn_buy.setTint(0xffffff);
                                    btn_buy.inputEnabled = true;
                                }
                            });


                        }
                        else if (error !== null) {
                            alert("StartPurchase Error:  " + PlayFab.GenerateErrorReport(error));
                            btn_buy.setTint(0xffffff);
                            btn_buy.inputEnabled = true;
                        }
                    });


                }
            });

            let btn_close = this.add.image(900, 200, "close").setDepth(-1);
            btn_close.inputEnabled = true;
            shopGroup.push(btn_close);
            btn_close.on('pointerdown', function () {
                for (let i in shopGroup) {
                    let child = shopGroup[i];
                    child.disableInteractive()
                    child.setDepth(-1);

                }
            });

            let btn_shop = this.add.image(200, 600, 'shop').setScale(0.5);
            btn_shop.inputEnabled = true;
            btn_shop.setInteractive();
            btn_shop.on('pointerdown', function () {
                for (let i in shopGroup) {
                    let child = shopGroup[i];
                    child.setInteractive();
                    child.setDepth(5);
                }
            });

        }
    }

    this.add.image(100, 600, 'warehouse').setScale(0.5);

    // userSoil = [];
    // userFertilizer = [];
    // userProduct = [];
    // userSeed = [];
    // userVirtualCurrency = { GD: 0 };



   
    for (let i = 0; i < 15; i++) {

        let x = Math.floor(i / 3);
        let y = i % 3;
        userSoil[i] = new Object();
        userSoil[i] = this.add.image(450 - 135 * y + 155 * x, 285 + 50 * y + 60 * x, 'soil_unready');
        userSoil[i].ready = false;
        userSoil[i].hasPlant = false;
        userSoil[i].species = null;
        userSoil[i].plant_time = null;
        userSoil[i].acceleration = 0;
        userSoil[i].plant = this.add.image(450 - 135 * y + 155 * x, 270 + 50 * y + 60 * x, 'nothing');
        userSoil[i].plant.depth = 2;
        userSoil[i].planting = function (_species) {
            this.species = _species;
            this.acceleration = 0;
            date = new Date();
            this.plant_time = date.getTime();
            this.plant.setTexture(_species + '_seed');
            this.hasPlant = true;
        };
        userSoil[i].eradicate = function () {
            this.species = null;
            this.plant_time = null;
            this.acceleration = 0;
            this.hasPlant = false;
            this.plant.setTexture('nothing');
        };

    }


    this.add.image(iconLeft, sloganYH, 'GD').setScale(0.5);
    moneyNum = this.add.text(iconLeft + 25, sloganYH, 'GD:' + userVirtualCurrency.GD, { fontSize: '20px', fontWeight: 'bolder', fill: '#000' });
    for (let i = 0; i < allSpecies.length; i++) {
        let _seed = this.add.image(iconLeft + iconGap * (3 + i), sloganYL, allSpecies[i] + '_seed');
        userSeed[allSpecies[i] + '_seed'] = { count: 0 };       
        userSeed[allSpecies[i] + '_seed'].text = this.add.text(iconLeft + 35 + iconGap * (3 + i), sloganYL, 'x' + userSeed[allSpecies[i] + '_seed'].count, { fontSize: '20px', fontWeight: 'bolder', fill: '#000' });
        userSeed[allSpecies[i] + '_seed'].setCount = function (_count) { this.count = _count; this.text.setText('x' + _count) };
        _seed.inputEnabled = true;
        _seed.setInteractive();
        _seed.on('pointerdown', function () { player.setTexture(allSpecies[i] + '_seed'); opreationType = 3; currentSpecies = allSpecies[i] }, this);

        userProduct[allSpecies[i]] = { count: 0 };
        this.add.image(iconLeft + iconGap * (2 + i), sloganYH, allSpecies[i]).setScale(0.5);
        userProduct[allSpecies[i]].text = this.add.text(iconLeft + 25 + iconGap * (2 + i), sloganYH, 'x' + userProduct[allSpecies[i]].count, { fontSize: '20px', fontWeight: 'bolder', fill: '#000' });
        userProduct[allSpecies[i]].setCount = function (_count) { this.count = _count; this.text.setText('x' + _count) };
    }


    userFertilizer['common_fertilizer'] = { count: 0 };
    let _fertilizer = this.add.image(iconLeft + iconGap * 2, sloganYL, 'fertilizer');
    userFertilizer['common_fertilizer'].text = this.add.text(iconLeft + 35 + iconGap * 2, sloganYL, 'x' + userFertilizer['common_fertilizer'].count, { fontSize: '20px', fontWeight: 'bolder', fill: '#000' });
    userFertilizer['common_fertilizer'].setCount = function (_count) { this.count = _count; this.text.setText('x' + _count) };
    _fertilizer.inputEnabled = true;
    _fertilizer.setInteractive();
    _fertilizer.on('pointerdown', function () { player.setTexture('fertilizer'); opreationType = 2; }, this);

    var buttonDude = this.add.image(iconLeft, sloganYL, 'dude').setScale(1.5);
    var buttonSpade = this.add.image(iconLeft + iconGap, sloganYL, 'spade');

    buttonSpade.inputEnabled = true;
    buttonSpade.setInteractive();
    buttonSpade.on('pointerdown', function () { player.setTexture('spade'); opreationType = 1; }, this);

    buttonDude.inputEnabled = true;
    buttonDude.setInteractive();
    buttonDude.on('pointerdown', function () { player.setTexture('dude'); sync(); opreationType = 0; }, this);


    player = this.physics.add.sprite(100, 450, 'dude', 6);
    player.depth = 10;
    player.setCollideWorldBounds(true);

    self.setInterval("grow()", 1000);
    self.setInterval("sync()", 30000);
    // login();

}
function update() {
    // if (gameOver) {
    //     return;
    // }
    if (this.input.x > player.width && this.input.x < config.width - player.width
        && this.input.y > player.height && this.input.y < config.height - player.height) {
        player.x = this.input.x;
        player.y = this.input.y;
    }
}


function soilInit() {

    for (let i = 0; i < userSoil.length; i++) {
        let child = userSoil[i];
        if (child.ready) {
            child.plant.inputEnabled = true;
            child.plant.setInteractive();
            child.plant.on('pointerdown', function () {
                if (child.hasPlant) {
                    if (opreationType == 0) {
                        alert("growtime: " + child.plant_time);
                    }
                    else if (opreationType == 1) {
                        if (soilOp[child.id]) {
                            eval(soilOp[child.id] + "()");
                        }
                        date = new Date();
                        let growTime = (date.getTime() - child.plant_time) / 1000;
                        growTime = parseFloat(growTime) + parseInt(child.acceleration);
                        if (growTime > growthStageTime[2]) {
                            userProduct[child.species].count += 5;
                            userProduct[child.species].text.setText('x' + userProduct[child.species].count);
                            harvestingRequest.push({
                                soilId: child.id,
                                productId: child.species + '_product'
                            });
                            soilOp[child.id] = "harvesting"
                        } else {
                            eradicateRequest.push({
                                soilId: child.id,
                            });
                            soilOp[child.id] = "eradicate";
                        }
                        child.eradicate();
                    }
                    else if (opreationType == 2) {
                        let num = userFertilizer['common_fertilizer'].count;
                        if (num > 0) {
                            if (soilOp[child.id] && soilOp[child.id] != accelerate) {
                                eval(soilOp[child.id] + "()");
                            }
                            userFertilizer['common_fertilizer'].setCount(num - 1);
                            child.acceleration = parseInt(child.acceleration) + 80;
                            updateGrowthStage(child);
                            soilOp[child.id] = "accelerate";
                            if (accelerateRequest) {
                                for (let i in accelerateRequest) {
                                    if (accelerateRequest[i].id == child.id) {
                                        accelerateRequest[i].consumeCount++;
                                        return;
                                    }

                                }
                            }
                            accelerateRequest.push({
                                soilId: child.id,
                                acceleration: child.acceleration,
                                fertilizerId: userFertilizer['common_fertilizer'].id,
                                consumeCount: 1
                            });


                        } else {
                            alert("no common fertilizer!");
                        }
                    }
                }
                else {
                    if (opreationType == 3) {
                        let num = userSeed[currentSpecies + '_seed'].count;
                        if (num > 0) {
                            if (soilOp[child.id]) {
                                eval(soilOp[child.id] + "()");
                            }
                            userSeed[currentSpecies + '_seed'].setCount(num - 1);
                            child.planting(currentSpecies);
                            seedingRequest.push({
                                soilId: child.id,
                                species: child.species,
                                plant_time: child.plant_time,
                                seedId: userSeed[currentSpecies + '_seed'].id
                            })
                            soilOp[child.id] = "seeding";
                        } else {
                            alert("no " + currentSpecies + " seeds!");
                        }
                    }
                }
            }, this);


        }
    }
}

function updateGrowthStage(child) {
    date = new Date();
    let now = date.getTime()
    let growTime = (now - child.plant_time) / 1000;
    growTime = parseFloat(growTime) + parseInt(child.acceleration);
    if (growTime >= growthStageTime[2]) {
        child.plant.setFrame(3);
    }
    else if (growTime >= growthStageTime[1]) {
        child.plant.setFrame(2);
    }
    else if (growTime >= growthStageTime[0]) {
        child.plant.setFrame(1);
    }
}
function grow() {
    for (let i = 0; i < userSoil.length; i++) {
        if (userSoil[i].hasPlant) {
            updateGrowthStage(userSoil[i]);
        }
    }
}
function login() {
    var loginRequest = {
        TitleId: "168E0",
        CustomId: customId,
        CreateAccount: true
    };
    PlayFabClientSDK.LoginWithCustomID(loginRequest, (result, error) => {
        if (result !== null) {
            alert("Welcome " + customId);
            playFabId = result.data.PlayFabId;
            getInventory();
            // GetCatalogItem();
            // ExecuteHelloWorld();
        }
        else if (error !== null) {
            alert("Login Error:  " + PlayFab.GenerateErrorReport(error));
        }
    });
}

function LogResult(result, error) {
    if (result != null) {
        // alert(" successful");
    }
    else if (error != null) {
        alert(PlayFab.GenerateErrorReport(error));
    }
}
function ExecuteHelloWorld() {
    let req = {
        FunctionName: "helloWorld",
        RevisionSelection: "Live",
        FunctionParameter: {
            inputValue: "123",
        }
    }

    PlayFabClientSDK.ExecuteCloudScript(req, LogResult);
}
function MakePurchase(id, price) {
    var purchaseItemRequest = {
        // In your game, this should just be a constant matching your primary catalog
        CatalogVersion: "main",
        ItemId: id,
        Price: price,
        VirtualCurrency: "GD"
    };
    PlayFabClientSDK.PurchaseItem(purchaseItemRequest, LogResult);
}

function getCatalogItem() {
    let req = {
        FunctionName: "pullCatalogItem",
        RevisionSelection: "Live",
    }
    PlayFabClientSDK.ExecuteCloudScript(req, (result, error) => {
        if (result != null) {
            catalogItem = result.data.FunctionResult.CatalogItem;
        }
        else if (error != null) {
            alert(PlayFab.GenerateErrorReport(error));
        }
    });
}
function getInventory() {
    PlayFabClientSDK.GetUserInventory({}, updateUserInventory);
}
function updateUserInventory(result, error) {

    if (result != null) {
        userVirtualCurrency = result.data.VirtualCurrency;
        moneyNum.setText('GD: ' + userVirtualCurrency.GD);
        let index = 0;
        for (let ind in result.data.Inventory) {
            let item = result.data.Inventory[ind];
            let customData;
            if (item.CustomData) {
                customData = item.CustomData;
            }
            switch (item.ItemClass) {
                case "soil":
                    userSoil[index].setTexture('soil_ready')
                    userSoil[index].ready = true;
                    soilOp[item.ItemInstanceId] = null;
                    userSoil[index].id = item.ItemInstanceId;
                    if (customData && customData.species) {
                        userSoil[index].planting(customData.species);
                        userSoil[index].plant_time = customData.plant_time;
                        userSoil[index].acceleration = customData.acceleration;
                        updateGrowthStage(userSoil[index]);

                        //userSoil[item.ItemInstanceId] = { species: customData.species, plant_time: customData.plant_time, acceleration: customData.acceleration };
                    } else {
                        // userSoil[index].species = null;
                        // userSoil[index].plant_time =null;
                        // userSoil[index].acceleration = 0;
                        //userSoil[item.ItemInstanceId] = { species: null, plant_time: null, acceleration: null };
                    }
                    index++;

                    break;
                case "fertilizer":
                    if (item.ItemId == 'common_fertilizer') {
                        userFertilizer[item.ItemId].id = item.ItemInstanceId;
                        userFertilizer[item.ItemId].setCount(item.RemainingUses);// = { count: item.RemainingUses };
                    }
                    break;
                case "seed":
                    userSeed[item.ItemId].id = item.ItemInstanceId;
                    userSeed[item.ItemId].setCount(item.RemainingUses);
                    break;
                case "product":
                    userProduct[item.ItemId].id = item.ItemInstanceId;
                    userProduct[item.ItemId].setCount(item.RemainingUses);
                    break;

            }

        }
        soilInit();
    }
    else if (error != null) {
        alert(PlayFab.GenerateErrorReport(error));
    }
}



function harvesting() {
    if (harvestingRequest.length > 0) {
        for (let i in harvestingRequest) {
            soilOp[harvestingRequest[i].id] = null;
        }
        let req = {
            FunctionName: "harvesting",
            RevisionSelection: "Live",
            FunctionParameter: {
                harvestRequest: harvestingRequest
            },
            GeneratePlayStreamEvent: true
        }
        PlayFabClientSDK.ExecuteCloudScript(req, LogResult);
        harvestingRequest = [];
    }

}
function seeding() {
    if (seedingRequest.length > 0) {
        for (let i in seedingRequest) {
            soilOp[seedingRequest[i].id] = null;
        }
        let req = {
            FunctionName: "seeding",
            RevisionSelection: "Live",
            FunctionParameter: {
                seedingRequest: seedingRequest
            },
            GeneratePlayStreamEvent: true
        }
        PlayFabClientSDK.ExecuteCloudScript(req, LogResult);
        seedingRequest = [];
    }

}
function eradicate() {

    if (eradicateRequest.length > 0) {
        for (let i in eradicateRequest) {
            soilOp[eradicateRequest[i].id] = null;
        }
        let req = {
            FunctionName: "eradicate",
            RevisionSelection: "Live",
            FunctionParameter: {
                eradicateRequest: eradicateRequest
            },
            GeneratePlayStreamEvent: true
        }
        PlayFabClientSDK.ExecuteCloudScript(req, LogResult);
        eradicateRequest = [];
    }

}
function accelerate() {
    if (accelerateRequest.length > 0) {
        for (let i in accelerateRequest) {
            soilOp[accelerateRequest[i]] = null;
        }
        let req = {
            FunctionName: "accelerate",
            RevisionSelection: "Live",
            FunctionParameter: {
                accelerateRequest: accelerateRequest
            },
            GeneratePlayStreamEvent: true
        }
        PlayFabClientSDK.ExecuteCloudScript(req, LogResult);
        accelerateRequest = [];
    }
}
